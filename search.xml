<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1605.给定行和列的和求可行矩阵</title>
    <url>/2023/03/14/1605-%E7%BB%99%E5%AE%9A%E8%A1%8C%E5%92%8C%E5%88%97%E7%9A%84%E5%92%8C%E6%B1%82%E5%8F%AF%E8%A1%8C%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>题目来自LeetCode：<a href="https://leetcode.cn/problems/find-valid-matrix-given-row-and-column-sums/">https://leetcode.cn/problems/find-valid-matrix-given-row-and-column-sums/</a></p>
<h1 id="题目（难度：中等）"><a href="#题目（难度：中等）" class="headerlink" title="题目（难度：中等）"></a>题目（难度：中等）</h1><p>给你两个非负整数数组 rowSum 和 colSum ，其中 rowSum[i] 是二维矩阵中第 i 行元素的和， colSum[j] 是第 j 列元素的和。换言之你不知道矩阵里的每个元素，但是你知道每一行和每一列的和。<br>请找到大小为 rowSum.length x colSum.length 的任意 非负整数 矩阵，且该矩阵满足 rowSum 和 colSum 的要求。<br>请你返回任意一个满足题目要求的二维矩阵，题目保证存在 至少一个 可行矩阵。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：rowSum = [3,8], colSum = [4,7]</span><br><span class="line">输出：[[3,0],</span><br><span class="line">      [1,7]]</span><br><span class="line">解释：</span><br><span class="line">第 0 行：3 + 0 = 3 == rowSum[0]</span><br><span class="line">第 1 行：1 + 7 = 8 == rowSum[1]</span><br><span class="line">第 0 列：3 + 1 = 4 == colSum[0]</span><br><span class="line">第 1 列：0 + 7 = 7 == colSum[1]</span><br><span class="line">行和列的和都满足题目要求，且所有矩阵元素都是非负的。</span><br><span class="line">另一个可行的矩阵为：[[1,2],</span><br><span class="line">                  [3,5]]</span><br><span class="line">提示：</span><br><span class="line">1 &lt;= rowSum.length, colSum.length &lt;= 500</span><br><span class="line">0 &lt;= rowSum[i], colSum[i] &lt;= 10e8</span><br><span class="line">sum(rowSum) == sum(colSum)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>本题难处在于暴力解决的时间复杂度是毁灭性的，最坏情况矩阵是每个元素都有10^8的可能，矩阵最大可达500*500&#x3D;2.5×10^5，最坏情况可达2.5×10^13。<br>从优化暴力方法的角度入手，矩阵的每个元素res[i][j]都会小于第i行的和，第j列的和，也就是说，res[i][j] &lt;&#x3D; min(rowSum[i],colSum[j])，这样搜索范围就减小了，但这远远不够。<br>由于矩阵是可以取0的，不妨先让res[i][j]取min(rowSum[i],colSum[j])，每取完一个数，就在当前行和与当前列和上减去这个数，就算用尽当行（列）的和，当行（列）剩下的元素还能用0填补。</p>
<ol>
<li>当且只有一行的时候，第一行的和永远会大于等于各列和，所以每次取的数都会是该列的和，数组rolSum即为答案。</li>
<li>当行数大于等于2时，矩阵n×m（n &gt;&#x3D; 2, m &gt;&#x3D; 1）的第一行按照上述规则取，整行取完后，第一行的行和也就是rowSum[0]会变成0，而colSum整个数组的和会减少rowSum[0],因为不止一行，所以此时colSum这个数组的和还是大于等于0的，又因为每次取的是min(rowSum[i],colSum[j])，所以colSum数组里每个数都还是大于等于0的。即取完一行后仍然和之前的性质没有发生变化。从而使所需矩阵减少成(n - 1) × m，循环往复，最终会使得n &#x3D; 1，从而求出所需矩阵。</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] restoreMatrix(<span class="type">int</span>[] rowSum, <span class="type">int</span>[] colSum) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> rowSum.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> colSum.length;</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++)&#123;</span><br><span class="line">                <span class="comment">//取当前行和与列和的较小值</span></span><br><span class="line">                res[i][j] = rowSum[i] &lt; colSum[j] ? rowSum[i] : colSum[j];</span><br><span class="line">                <span class="comment">//取完在当前行和与列和中减去</span></span><br><span class="line">                rowSum[i] -= res[i][j];</span><br><span class="line">                colSum[j] -= res[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode每日一题</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>2383.赢得比赛需要的最少训练时长</title>
    <url>/2023/03/13/2383-%E8%B5%A2%E5%BE%97%E6%AF%94%E8%B5%9B%E9%9C%80%E8%A6%81%E7%9A%84%E6%9C%80%E5%B0%91%E8%AE%AD%E7%BB%83%E6%97%B6%E9%95%BF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>题目来自：<a href="https://leetcode.cn/problems/minimum-hours-of-training-to-win-a-competition/">https://leetcode.cn/problems/minimum-hours-of-training-to-win-a-competition/</a></p>
<h1 id="题目（难度：简单）"><a href="#题目（难度：简单）" class="headerlink" title="题目（难度：简单）"></a>题目（难度：简单）</h1><p>你正在参加一场比赛，给你两个 正 整数 initialEnergy 和 initialExperience 分别表示你的初始精力和初始经验。<br>另给你两个下标从 0 开始的整数数组 energy 和 experience，长度均为 n 。<br>你将会 依次 对上 n 个对手。第 i 个对手的精力和经验分别用 energy[i] 和 experience[i] 表示。当你对上对手时，需要在经验和精力上都 严格 超过对手才能击败他们，然后在可能的情况下继续对上下一个对手。<br>击败第 i 个对手会使你的经验 增加 experience[i]，但会将你的精力 减少  energy[i] 。<br>在开始比赛前，你可以训练几个小时。每训练一个小时，你可以选择将增加经验增加 1 或者 将精力增加 1 。<br>返回击败全部 n 个对手需要训练的 最少 小时数目。</p>
<p>实例1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]</span><br><span class="line">输出：8</span><br><span class="line">解释：在 6 小时训练后，你可以将精力提高到 11 ，并且再训练 2 个小时将经验提高到 5 。</span><br><span class="line">按以下顺序与对手比赛：</span><br><span class="line">- 你的精力与经验都超过第 0 个对手，所以获胜。</span><br><span class="line">  精力变为：11 - 1 = 10 ，经验变为：5 + 2 = 7 。</span><br><span class="line">- 你的精力与经验都超过第 1 个对手，所以获胜。</span><br><span class="line">  精力变为：10 - 4 = 6 ，经验变为：7 + 6 = 13 。</span><br><span class="line">- 你的精力与经验都超过第 2 个对手，所以获胜。</span><br><span class="line">  精力变为：6 - 3 = 3 ，经验变为：13 + 3 = 16 。</span><br><span class="line">- 你的精力与经验都超过第 3 个对手，所以获胜。</span><br><span class="line">  精力变为：3 - 2 = 1 ，经验变为：16 + 1 = 17 。</span><br><span class="line">在比赛前进行了 8 小时训练，所以返回 8 。</span><br><span class="line">可以证明不存在更小的答案。</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>简单的模拟题，因为每击败一个敌人会增加经验，减少精力（击败敌人条件：精力和经验严格大于敌人），所以精力所需是敌人精力的总和加1，经验需要保证initialExperience + 第i个敌人之前的经验总和 &gt; 第i个敌人的经验即可。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minNumberOfHours</span><span class="params">(<span class="type">int</span> initialEnergy, <span class="type">int</span> initialExperience, <span class="type">int</span>[] energy, <span class="type">int</span>[] experience)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sumEnergy</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//总精力</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//需要训练的时长</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; energy.length; i++)&#123;</span><br><span class="line">            sumEnergy += energy[i];</span><br><span class="line">            <span class="comment">//判断initialExperience + 第i个敌人之前的经验总和 与 第i个敌人的经验</span></span><br><span class="line">            <span class="keyword">if</span>(initialExperience &lt;= experience[i])&#123; </span><br><span class="line">                <span class="comment">//少则训练到比当前敌人经验多1</span></span><br><span class="line">                res += experience[i] - initialExperience + <span class="number">1</span>;</span><br><span class="line">                initialExperience = experience[i] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            initialExperience += experience[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若需要的总能量大于初始能量 则训练至所需能量</span></span><br><span class="line">        <span class="keyword">if</span>(sumEnergy &gt;= initialEnergy)&#123;</span><br><span class="line">            res += sumEnergy - initialEnergy + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode每日一题</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
</search>
